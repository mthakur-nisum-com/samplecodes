{"version":3,"file":"static\\development\\pages\\index.js","sources":["webpack:///webpack/bootstrap","webpack:///./config/config.js","webpack:///./pages/index.js","webpack:///./public/appMain.js","webpack:///./public/components/common/customControls.js","webpack:///./public/components/common/form/formComponent.js","webpack:///./public/components/common/graphs/dataGraph.js","webpack:///./public/components/common/grid/dataGrid.js","webpack:///./public/components/transactions/addTransaction.js","webpack:///./public/components/transactions/transactionDasboard.js","webpack:///./public/components/transactions/transactionList.js","webpack:///./public/js/actions/transaction.js","webpack:///./public/js/constants.js","webpack:///./public/js/middleware/ajaxHandler.js","webpack:///./public/js/reducers/appReducer.js","webpack:///./public/js/reducers/index.js","webpack:///./public/js/reducers/transactions.js","webpack:///./public/js/services/common/ajax-service.js","webpack:///./public/js/services/common/base-sevice.js","webpack:///./public/js/services/common/error-service.js","webpack:///./public/js/services/validations/validationConfig.js","webpack:///./public/js/services/validations/validationMessage.js","webpack:///./public/js/services/validations/validators.js","webpack:///./public/js/store/appStore.js","webpack:///./public/js/url.js","webpack:///./public/js/utils/array-utils.js","webpack:///./public/js/utils/format-url.js","webpack:///external \"ag-grid-react\"","webpack:///external \"axios\"","webpack:///external \"react\"","webpack:///external \"react-redux\"","webpack:///external \"recharts\"","webpack:///external \"redux\"","webpack:///external \"redux-form\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","export default {\r\n    appPort: 9000,\r\n    dbName: 'sampledatabase',\r\n    dbUserName: 'test',\r\n    dbPassword: 'test123',\r\n    dbPort: 35957\r\n}","import React from 'react';\r\nimport '../public/scss/styles.scss';\r\nimport { AppMain } from '../public/appMain.js';\r\n\r\nexport default () => <section className=\"main-container\">\r\n\t\t<AppMain/>\r\n\t</section>;","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './js/store/appStore';\r\nimport { TransactionDashboard } from './components/transactions/transactionDasboard';\r\nimport css from './scss/styles.scss';\r\nexport const AppMain = () => (\r\n    <Provider store={store}>\r\n        <main className=\"main-container\">\r\n        \t<section className=\"content-section\">\r\n            \t<TransactionDashboard/>\r\n            </section>\r\n        </main>\r\n    </Provider>\r\n);","import React,{ Fragment } from 'react';\r\nimport { Field } from 'redux-form';\r\nimport { checkValidations } from '../../js/services/validations/validators';\r\n\r\n\r\nexport const FieldError = ({ msg }) => <span className=\"form-error\">{msg}</span>;\r\nexport const FieldWarning = ({ msg }) => <span className=\"form-warning\" > {msg}</span>;\r\n\r\nconst FormValidationMessge = ({ error, warning }) => <Fragment>\r\n    {error && <FieldError msg={error} />}\r\n    {warning && <FieldError msg={warning} />}\r\n</Fragment>\r\n\r\nconst renderField = ({ input, label, type, meta: { touched, error, warning } }) => {\r\n    return (\r\n        <Fragment>\r\n            <Fragment>\r\n                <input {...input} type={type} />\r\n                {touched && (<FormValidationMessge error={error} warning={warning}/>)}\r\n            </Fragment>\r\n        </Fragment>\r\n    )\r\n}\r\nconst RadioBtnGrp = ({ input, options, meta: { touched, error, warning }, keyName , customClass , selectedClass} ) => {\r\n    const {value} = input;\r\n    return (<Fragment>\r\n        {options.map((option, index) => {\r\n            return (\r\n                <Fragment key={index}>\r\n                    <label className={value && value[keyName] === option[keyName]?`${selectedClass} ${customClass}`:`${customClass}`}>{option[keyName]}\r\n                        <input name={input.name} onChange={event => {\r\n                            return input.onChange(event.target.checked ? option : null);\r\n                        }} id={index} key={index} type=\"radio\" />\r\n                    </label>\r\n                </Fragment>\r\n            )\r\n\r\n        })}\r\n        { touched && (<FormValidationMessge error={error} warning={warning} /> )}\r\n    </Fragment>)\r\n};\r\nexport const Input = ({ name, validate, warning, type, id }) => (<Field name={name} type={type} component={renderField} validate={checkValidations(name, validate)} id={id} />);\r\nexport const RadioButtonGroup = ({ name, validate, warning=[], options , keyName , customClass='' , selectedClass=''}) => <Field component={RadioBtnGrp} name={name} validate={checkValidations(name, validate)} warning={warning} options={options} keyName={keyName} customClass={customClass} selectedClass={selectedClass}/>","import React from 'react'\r\nimport { reduxForm } from 'redux-form';\r\nimport { connect } from 'react-redux';\r\nexport const FormComponent = props => (\r\n    <form onSubmit={props.handleSubmit} autoComplete=\"off\">\r\n        {props.children}\r\n    </form>\r\n)\r\nconst stateToProps = (state, props) => ({\r\n    form: props.name,\r\n    initialValues: props.initialValues\r\n})\r\nexport default connect(stateToProps, null)(reduxForm(FormComponent.props)(FormComponent));","import React, { Fragment } from 'react';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend} from 'recharts';\r\n\r\n\r\nexport const RenderLineChart = ({ data = [], curves = '', width = 0, height = 0, top=0 ,left=0 ,right=0 ,bottom = 0 }) => (\r\n    <LineChart width={width} height={height} data={data} margin={{ top: top, right: left, bottom: right, left: bottom }} >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"transactionId\" />\r\n        <YAxis name=\"Amount\"/>\r\n        <Tooltip dataKey='transactionType'/>\r\n        <Legend />\r\n        <Line type=\"monotone\" dataKey=\"Visa\" stroke=\"red\" />\r\n        <Line type=\"monotone\" dataKey=\"American Express\" stroke=\"green\" name=\"\"/>\r\n        <Line type=\"monotone\" dataKey=\"DBS PayLa\" stroke=\"yellow\" name=\"\"/>\r\n</LineChart>);","import React, { Fragment } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\r\nexport const DataGrid = ({ columns = [], data = [], pagination = false, sortable = false, filterable = false, paginationPageSize=0}) => {\r\n    return (\r\n        <section className=\"ag-theme-balham data-grid\">\r\n            <AgGridReact rowData={data} columnDefs={columns} pagination={pagination} filterable={filterable} enableRangeSelection={pagination} paginationPageSize={paginationPageSize} sizeColumnsToFit={true}/>\r\n        </section>\r\n    )\r\n\r\n};","import React, { Fragment , PureComponent} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport FormComponent from '../common/form/formComponent';\r\nimport { Input, RadioButtonGroup} from '../common/customControls';\r\nimport { addTransaction, getUsers, getTransactionTypes } from '../../js/actions/transaction';\r\n\r\nconst stateToProps = ({ transaction }) => ({\r\n    users: transaction.users,\r\n    transactionTypes: transaction.transactionTypes\r\n});\r\n@connect(stateToProps, { addTransaction, getUsers, getTransactionTypes })\r\nexport default class extends PureComponent {\r\n    componentDidMount = async () => {\r\n        const { getUsers, getTransactionTypes } = this.props;\r\n        await getUsers();\r\n        await getTransactionTypes();\r\n    } \r\n    addNewTransaction = (...params) => {\r\n        const [user, action, { reset }] = params;\r\n        const { transactionAmount, user: { userId, userName }, transactionType } = user;\r\n        const transactionObj = {\r\n            transactionAmount: transactionAmount,\r\n            userId: userId,\r\n            userName: userName,\r\n            transactionType: transactionType\r\n        };\r\n        this.props.addTransaction(transactionObj);\r\n        reset();\r\n    }\r\n    render() {\r\n        const { users, transactionTypes} = this.props;\r\n        return (\r\n            <Fragment>\r\n                {(transactionTypes.length >0&& users.length >0) && (<section className=\"add-transaction-sec\">\r\n                    <FormComponent name=\"addTransaction\" initialValues={{ user: null, transactionAmount: null, transactionType: null }} onSubmit={this.addNewTransaction}>\r\n                        <ul className=\"add-transaction-form-sec\">\r\n                            <li>\r\n                                <RadioButtonGroup options={users} name=\"user\" validate={true} keyName=\"userName\" customClass=\"custom-radio-btn-no-label\" selectedClass=\"custom-radio-btn-selected\"/>\r\n                            </li>\r\n                            <li>\r\n                                <RadioButtonGroup options={transactionTypes} name=\"transactionType\" validate={true} keyName=\"transactiontype\" customClass=\"custom-radio-btn-label\" />\r\n                            </li>\r\n                            <li className=\"form-row\">\r\n                                <Input type=\"text\" name=\"transactionAmount\" id=\"transactionAmount\" validate={true} />\r\n                            </li>\r\n                            <li className=\"form-row\">\r\n                                <button type=\"submit\" className=\"app-primary-btn right\">Transfer</button>\r\n                            </li>\r\n                        </ul>\r\n                    </FormComponent>\r\n                </section>)}\r\n           </Fragment>\r\n\r\n        )\r\n    }\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport AddTransaction from './addTransaction';\r\nimport TransactionListDashboard from './transactionList';\r\nexport const TransactionDashboard = () => (\r\n    <section className=\"user-transaction-details-sec\">\r\n        <AddTransaction />\r\n        <TransactionListDashboard/>\r\n    </section>\r\n    \r\n);","import React, { memo } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { DataGrid } from '../common/grid/dataGrid';\r\nimport { getTransactions } from '../../js/actions/transaction';\r\nimport { RenderLineChart } from '../common/graphs/dataGraph';\r\nimport { findByProps } from '../../js/utils/array-utils';\r\nconst columns = [{\r\n    field: 'transactionId',\r\n    headerName: 'Transaction ID',\r\n    filter: true\r\n}, {\r\n    field: 'transactionDoneBy',\r\n    headerName: 'User Name',\r\n    filter: true\r\n}, {\r\n    field: 'transactiontype',\r\n    headerName: 'Payment Mode',\r\n    filter: true\r\n}, {\r\n    field: 'transactionAmount',\r\n    headerName: 'Amount',\r\n    filter: true\r\n}];\r\nconst graphCurves = ['DBS PayLa', 'American Express', 'Visa'];\r\nconst generateGraphData = (list = []) => {\r\n    const graphData = [];\r\n   \r\n    graphCurves.forEach((paymentMode) => {\r\n        const paymentList = findByProps(list, { transactiontype: paymentMode });\r\n        paymentList.forEach(({ transactiontype, transactionAmount, transactionId },index) => {\r\n            graphData.push({\r\n                [paymentMode.trim()]: transactionAmount,\r\n                'transactionId': graphData.length,\r\n                'transactionAmount': transactionAmount\r\n            });\r\n        });\r\n    });\r\n    return graphData;\r\n}\r\nexport const TransactionListDashboard = memo(({ transactions, getTransactions}) => {\r\n    if (!transactions.length) {\r\n        getTransactions();\r\n    }\r\n    return (\r\n        <section className=\"transaction-grid-sec\">\r\n            <DataGrid columns={columns} data={transactions} pagination={true} paginationPageSize={10}/>\r\n            <section className=\"transaction-graph-sec\">\r\n                <RenderLineChart data={generateGraphData(transactions)} curves='Visa,DBS PayLa,American Express' width={800} height={400} margin={{ \"margin-left\": '-34px' }} />\r\n            </section>\r\n        </section>\r\n\r\n    )\r\n})\r\n\r\nconst stateToProps = ({ transaction }) => ({\r\n    transactions: transaction.transactions\r\n});\r\n\r\nexport default connect(stateToProps, { getTransactions })(TransactionListDashboard);","import { createConstants , POST_REQUEST , GET_REQUEST} from '../constants';\r\nimport { transactionUrl, usersUrl, transactionTypeUrl} from '../url';\r\n\r\nexport const ADD_TRANSACTION = createConstants('ADD_TRANSACTION');\r\nexport const GET_USERS = createConstants('GET_USERS');\r\nexport const TRANSACTION_TYPE = createConstants('TRANSACTION', 'TYPE');\r\nexport const GET_TRANSACTIONS = createConstants('GET_TRANSACTIONS');\r\n\r\n\r\nconst addTransactionSuccess = ({ transactions }) => ({\r\n    type: ADD_TRANSACTION.SUCCESS,\r\n    payLoad :{\r\n        transactions: transactions\r\n    }\r\n});\r\n\r\nconst getUsersSuccess = ({ userList }) => ({ \r\n    type: GET_USERS.SUCCESS,\r\n    payLoad: {\r\n        users: userList\r\n    }\r\n});\r\n\r\nconst transactionTypeSuccess = ({ transactionTypeList }) => ({\r\n    type: TRANSACTION_TYPE.SUCCESS,\r\n    payLoad: {\r\n        transactionTypes: transactionTypeList\r\n    }\r\n})\r\nexport const addTransaction = (params = null) => ({\r\n    type: ADD_TRANSACTION.REQUEST,\r\n    payLoad: {\r\n        url: transactionUrl,\r\n        requestType: POST_REQUEST,\r\n        params: params,\r\n        success: addTransactionSuccess\r\n    }\r\n});\r\n\r\n\r\nexport const getUsers = (params = null) => ({\r\n    type: GET_USERS.REQUEST,\r\n    payLoad: {\r\n        url: usersUrl,\r\n        requestType: GET_REQUEST,\r\n        params: params,\r\n        success: getUsersSuccess\r\n    }\r\n});\r\n\r\nexport const getTransactionTypes = (params = null) => ({\r\n    type: TRANSACTION_TYPE.REQUEST,\r\n    payLoad: {\r\n        url: transactionTypeUrl,\r\n        requestType: GET_REQUEST,\r\n        params: params,\r\n        success: transactionTypeSuccess\r\n    }\r\n});\r\n\r\nexport const getTransactions = (params = null) => ({\r\n    type: GET_TRANSACTIONS.REQUEST, \r\n    payLoad: {\r\n        requestType: GET_REQUEST,\r\n        params: params,\r\n        url: transactionUrl,\r\n        success: addTransactionSuccess\r\n    }\r\n})","export const createConstants = (actionName=null,prefix = null) =>({\r\n    'REQUEST': prefix? `${actionName}_${prefix}_REQUEST`:`${actionName}_REQUEST`,\r\n    'SUCCESS': prefix? `${actionName}_${prefix}_SUCCESS`:`${actionName}_SUCCESS`,\r\n    'FAIL': prefix? `${actionName}_${prefix}_FAIL`:`${actionName}_FAIL`,\r\n    'RESET': prefix? `${actionName}_${prefix}_RESET`:`${actionName}_RESET`,\r\n});\r\n\r\nexport const SERVICE_ERROR = 'SERVICE_ERROR';\r\n\r\nexport const GET_REQUEST = 'GET_REQUEST';\r\nexport const PUT_REQUEST = 'PUT_REQUEST';\r\nexport const DELETE_REQUEST = 'DELETE_REQUEST';\r\nexport const POST_REQUEST = 'POST_REQUEST';\r\nexport const SHOW_DIALOG = 'SHOW_DIALOG';\r\nexport const CLOSE_DIALOG = 'CLOSE_DIALOG';","import { makeServiceRequest } from '../services/common/ajax-service';\r\nimport { errorService } from '../services/common/error-service';\r\nexport const ajaxHandler = store => next => async action => {\r\n    if (action && action.payLoad && action.payLoad.url) {\r\n        console.log('url', action.payLoad.url);\r\n\t\ttry {\r\n\t\t\tconst {payLoad: {requestType,url,params=null,success},type} = action;\r\n\t\t\tconst response = await makeServiceRequest(requestType,url,null,params);\r\n\t\t\tconsole.log('response recieved',response);\r\n\t\t\tif(response && response.data) {\r\n\t\t\t\tnext(success(response.data));\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(e) {\r\n\t\t\tnext(errorService(500, 'service error'));\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\tnext(action);\r\n\t}\r\n}","import { combineReducers } from 'redux';\r\nimport appReducers from './index';\r\n\r\n\r\nexport default combineReducers(appReducers);","import { reducer as form } from 'redux-form';\r\nimport transaction from './transactions';\r\n\r\nexport default {\r\n    transaction,\r\n    form\r\n};","import { createConstants } from '../constants';\r\nimport { GET_USERS, TRANSACTION_TYPE, ADD_TRANSACTION} from '../actions/transaction';\r\nconst initialState={\r\n    transactions: [],\r\n    users: [],\r\n    transactionTypes:[]\r\n}\r\n\r\nexport default (state = initialState , { type , payLoad } ) => {\r\n    switch (type) {\r\n        case GET_USERS.SUCCESS:\r\n            return { ...state, ...payLoad };\r\n        case TRANSACTION_TYPE.SUCCESS:\r\n            return { ...state, ...payLoad };\r\n        case ADD_TRANSACTION.SUCCESS:\r\n            return { ...state, ...payLoad };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n} ","import { handleServiceCall } from './base-sevice';\r\n\r\nexport const makeServiceRequest = async (requestType,url,...opts) => await handleServiceCall(requestType,url,...opts);\r\n","import axios from 'axios';\r\nimport { GET_REQUEST,PUT_REQUEST, POST_REQUEST } from '../../constants';\r\nimport { formatUrl ,formatQueryParams } from '../../utils/format-url';\r\nconst doGetRequest = async (url,queryParams=null) => {\r\n    let [result,error,queryString] = [null,null,''];\r\n    if(queryParams) {\r\n        queryString = formatQueryParams(queryParams); \r\n    }\r\n    try {\r\n        url = formatUrl(url,queryString);\r\n        result = await axios.get(url);\r\n        return result;\r\n    }\r\n    catch(e) {\r\n        console.error(e);\r\n        return null;\r\n    }\r\n}\r\nconst doPostRequest = async(url,formData=null) => {\r\n    try {\r\n        const result = await axios.post(url,formData);\r\n        return result;\r\n    }\r\n    catch(e) {\r\n        console.error(e);\r\n        return null;\r\n    }\r\n}\r\nconst doPutRequest = async(url,formData=null) => {\r\n    try {\r\n        const result = await axios.post(url,formData);\r\n        return result;\r\n    }\r\n    catch(e) {\r\n        console.error(e);\r\n        return null;\r\n    }\r\n}\r\nexport const handleServiceCall = async (...params) => {\r\n    try {\r\n        const [type,url,success,formParams] = params;\r\n        switch(type) {\r\n            case GET_REQUEST:\r\n                return await doGetRequest(url,formParams);\r\n            case PUT_REQUEST:\r\n                return await doPutRequest(url,formParams);\r\n            case POST_REQUEST:\r\n                return await doPostRequest(url,formParams);\r\n            default: \r\n                return null;\r\n                \r\n        }\r\n    }\r\n    catch(e){\r\n        console.error(e);\r\n        return null;\r\n    }\r\n    \r\n};\r\n\r\n","import { SERVICE_ERROR } from '../../constants';\r\n\r\nexport const errorService = (errorCode,errorMessage) => ({\r\n    type: SERVICE_ERROR,\r\n    payLoad: {\r\n        code:errorCode,\r\n        errorMsg: errorMessage\r\n    }\r\n})","export default {\r\n    \"transactionAmount\": {\r\n        \"required\": true,\r\n        \"maxRange\": 500,\r\n        \"numeric\": true\r\n    },\r\n    \"user\": {\r\n        \"required\": true\r\n    },\r\n    \"transactionType\": {\r\n        \"required\": true\r\n    }\r\n}\r\n\r\n","const messages = {\r\n    \"transactionAmount\": {\r\n        \"required\": 'Amount is Required',\r\n        \"maxRange\": 'Transaction amount cannot exceed more than 500',\r\n        \"numeric\": 'Transaction amount should be a integer and either zero or non-negetive integer'\r\n    },\r\n    \"user\": {\r\n        \"required\": 'Select a User to initiate transfer'\r\n    },\r\n    \"transactionType\": {\r\n        \"required\": \"Select payment mode\"\r\n    }\r\n}\r\n\r\nexport const getMessage = (fieldName, validator) => {\r\n    const messageObj = messages[fieldName];\r\n    return messageObj[validator] ? messageObj[validator] : '';\r\n};\r\n\r\n","import validationConfig from './validationConfig';\r\nimport { getMessage } from './validationMessage';\r\nconst number = new RegExp('^[0-9]+$');\r\n\r\n\r\n\r\nexport const required = (...params) => {\r\n    const [value, field, formObj, fieldName] = params;\r\n    return value ? value.constructor === String && value.trim().length <= 0 ? getMessage(fieldName, 'required') : typeof value === Object && value === null ? getMessage(fieldName, 'required') : '' : getMessage(fieldName, 'required');\r\n}\r\n\r\nconst maxRange = function (...params) {\r\n    const [value, field, formObj, fieldName] = params;\r\n    return value && parseInt(value, 10) > this.range ? getMessage(fieldName, 'maxRange') : '';\r\n}\r\n\r\nconst numeric = (...params) => { \r\n    const [value, field, formObj, fieldName] = params;\r\n    return value ? !number.test(value) ? getMessage(fieldName, 'numeric') : '' : '';\r\n};\r\n\r\nconst buildValidator = (fieldName = null) => {\r\n    const validatorList = [];\r\n    const validators = validationConfig[fieldName];\r\n    const validations = Object.keys(validators);\r\n    validations.forEach((validatorName) => {\r\n        if(validators[validatorName]) {\r\n            switch (validatorName) {\r\n                case 'required':\r\n                    validatorList.push(required);\r\n                    break;\r\n                case 'maxRange':\r\n                    validatorList.push(maxRange.bind({ range: validators[validatorName] }));\r\n                    break;\r\n                case 'numeric':\r\n                    validatorList.push(numeric);\r\n                    break;\r\n            }\r\n        }\r\n        \r\n    });\r\n    return validatorList;\r\n}\r\nexport const checkValidations = (name = '', validate = false) => {\r\n    if (validate) {\r\n        if (name && name.length) {\r\n            const validations = buildValidator(name);\r\n            return validations;\r\n        }\r\n    }\r\n};","import { createStore, applyMiddleware} from 'redux';\r\nimport reducers from '../reducers/appReducer';\r\nimport { ajaxHandler } from '../middleware/ajaxHandler';\r\n\r\nexport const store = createStore(reducers, applyMiddleware(ajaxHandler));","import { buildServiceUrl } from './utils/format-url';\r\n\r\nconst appUrl = buildServiceUrl();\r\n\r\nexport const transactionUrl = `${appUrl}/transactions`;\r\nexport const usersUrl = `${appUrl}/users`;\r\nexport const transactionTypeUrl = `${appUrl}/transactionTypes`;","export const findByProps = (set=[], properties) => {\n    return set.filter(function (entry) {\n        return Object.keys(properties).every(function (key) {\n            return entry[key] === properties[key];\n        });\n    });\n}\n","\r\nimport appConfig from '../../../config/config';\r\nconst { appPort } = appConfig;\r\nexport const formatQueryParams= (params=null) => {\r\n    let keyString ='';\r\n    if(params) {\r\n        for(let keys of Object.keys(params)) {\r\n            keyString+= `${keys}=${params[keys]}`;\r\n            keyString+= Object.keys(params)[Object.keys(params).length-1] === keys ? '':'&';\r\n        };\r\n    }\r\n    return keyString;\r\n}\r\n\r\nexport const buildServiceUrl = () => {\r\n    if (process.browser) {\r\n        const { host, protocol } = window.location;\r\n        const serviceUrl = `${protocol}//${host}`;\r\n        return serviceUrl;\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n    \r\n}\r\n\r\nexport const formatUrl = (url,queryString = null) => queryString? `${url}?${queryString}`:`${url}`;","module.exports = require(\"ag-grid-react\");","module.exports = require(\"axios\");","module.exports = require(\"react\");","module.exports = require(\"react-redux\");","module.exports = require(\"recharts\");","module.exports = require(\"redux\");","module.exports = require(\"redux-form\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxFA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAOA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAA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ACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAFA;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AARA;AAWA;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AARA;AAWA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;AC1DA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAFA;;;;;;;;;;;;ACFA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AATA;;;;;;;;;;;;ACAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AATA;AAcA;AACA;AACA;AACA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;ACNA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAAA;AACA;AAEA;AACA,eAIA;AAEA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}